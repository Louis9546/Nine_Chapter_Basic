61. Search for a Range (lintcode)
----------------------------------------------------------------------------------------------------------------------------

Given a sorted array of n integers, find the starting and ending position of a given target value.

If the target is not found in the array, return [-1, -1].

Example
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Challenge: O(log n) time.

My Version: Use binary search to find the location of target. Then find the start and end index.
public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: a list of length 2, [index1, index2]
     */
    public int[] searchRange(int[] A, int target) {
        // write your code here
        int[] res = new int[]{-1,-1};
        if(A == null || A.length == 0){
            return res;
        }
        int loca = binarySearch(A, 0, A.length - 1, target); // -1 or index
        if(loca == -1) {
            return res;
        }
        
        int begin = loca, end = loca;
        while((begin > 0) && (A[begin - 1] == A[loca])){
            begin--;
        }
        while((end < A.length - 1) && (A[end + 1] == A[loca])){
            end++;
        }
        res[0] = begin;
        res[1] = end;
        return res;
    }
    
    // Find the location of target in sorted array 
    public int binarySearch(int[] A, int start, int end, int target){
        if(start <= end){
            int mid = start + (end - start)/2;
            if(A[mid] == target){
                return mid;
            }
            else if(A[mid] < target){
             return binarySearch(A, mid + 1, end, target);
            }
            else{
             return binarySearch(A, start, mid - 1, target);
            } 
        }
        return -1;
    }
}


60. Search Insert Position
----------------------------------------------------------------------------------------------------------------------------
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

public class Solution {
    /**
     * @param A: an integer sorted array
     * @param target: an integer to be inserted
     * @return: An integer
     */
    public int searchInsert(int[] A, int target) {
        // write your code here
        int res = 0;
        if(A == null || A.length == 0){
            return res;
        }
        return binarySearch(A, 0, A.length - 1, target); // -1 or index
        
        
    }
    
    // Find the location of target in sorted array 
    public int binarySearch(int[] A, int start, int end, int target){
        if(start <= end){
            int mid = start + (end - start)/2;
            if(A[mid] == target){
                return mid;
            }
            else if(A[mid] < target){
             return binarySearch(A, mid + 1, end, target);
            }
            else{
             return binarySearch(A, start, mid - 1, target);
            } 
        }
        return start;
    }
}
